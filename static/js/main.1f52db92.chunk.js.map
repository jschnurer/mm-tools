{"version":3,"sources":["media/icons/backup.svg","media/icons/magnifying-glass.svg","Routing.tsx","components/RandomParty.tsx","NotFound.tsx","components/Welcome.tsx","components/layout/MenuItem.tsx","components/layout/MainMenu.tsx","components/layout/Layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Routes","MMGames","availableClasses","partySizes","RandomParty","useState","game","partyMembers","state","setState","map","key","onClick","classes","partySize","i","push","Math","floor","random","length","generateParty","className","mem","ix","NotFound","Welcome","Routing","path","exact","component","Root","MenuItem","label","icon","url","match","useRouteMatch","to","src","alt","MainMenu","backupIcon","magnifyingGlassIcon","ItemIdentifier","Layout","children","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,8C,mKCS/BC,E,wDCPNC,EAAU,CACd,MACA,OAOIC,EAAsC,CAC1C,IAAO,CACL,SACA,UACA,SACA,QACA,SACA,YAEF,IAAO,CACL,SACA,UACA,SACA,QACA,SACA,WACA,OACA,SACA,UAQEC,EAA0B,CAC9B,IAAO,EACP,IAAO,GA6DMC,EArDe,WAAO,IAAD,EACRC,mBAA4B,CACpDC,KAAM,GACNC,aAAc,KAHkB,mBAC3BC,EAD2B,KACpBC,EADoB,KAsBlC,OACE,oCACE,6BACGR,EAAQS,KAAI,SAAAJ,GAAI,OACf,4BACEK,IAAKL,EACLM,QAAS,kBAtBG,SAACN,GAMrB,IALA,IAAMO,EAAUX,EAAiBI,GAC3BQ,EAAYX,EAAWG,GAEzBC,EAAyB,GAEpBQ,EAAI,EAAGA,EAAID,EAAWC,IAC7BR,EAAaS,KAAKH,EAAQI,KAAKC,MAAMD,KAAKE,SAAWN,EAAQO,UAG/DX,EAAS,CACPH,OACAC,iBAUqBc,CAAcf,IAC7BgB,UAAU,kBAEThB,OAINE,EAAMD,aAAaa,OAAS,GAC3B,6BACE,sCAAYZ,EAAMF,KAAlB,UACA,4BACGE,EAAMD,aAAaG,KAAI,SAACa,EAAKC,GAAN,OACtB,wBACEb,IAAKa,GAEJD,UClFFE,EANY,kBACzB,oCACE,wCACA,yECGWC,EANW,kBACxB,oCACE,qDACA,gH,SHIQ1B,K,SAAAA,E,4BAAAA,E,mCAAAA,M,KAMZ,IASe2B,EATW,kBACxB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAM5B,EAAOI,YAAayB,OAAK,EAACC,UAAW1B,IAClD,kBAAC,IAAD,CAAOwB,KAAM5B,EAAO+B,KAAMF,OAAK,EAACC,UAAWJ,IAC3C,kBAAC,IAAD,KACE,kBAAC,EAAD,S,+DICSM,EAV4B,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IACrDC,EAAQC,YAAcF,GAE1B,OACE,kBAAC,IAAD,CAAMG,GAAIH,EAAKb,UAAS,oBAAec,EAAQ,SAAW,IAA1D,sBACE,yBAAKG,IAAKL,EAAMM,IAAKP,EAArB,uBADF,IACkCA,ICKvBQ,EAdY,kBACzB,yBAAKnB,UAAU,YAAf,sBACE,kBAAC,EAAD,CACEW,MAAM,eACNC,KAAMQ,IACNP,IAAKnC,EAAOI,YAHd,uBAKA,kBAAC,EAAD,CACE6B,MAAM,YACNC,KAAMS,IACNR,IAAKnC,EAAO4C,eAHd,yBCFWC,EARU,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACvB,yBAAKxB,UAAU,OAAf,sBACE,kBAAC,EAAD,wBACA,yBAAKA,UAAU,cAAf,sBACGwB,KCMQC,EAPO,kBACpB,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,SCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASf,MACvB,2DCZNgB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1f52db92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/backup.668d563a.svg\";","module.exports = __webpack_public_path__ + \"static/media/magnifying-glass.ab6f39ec.svg\";","import React from \"react\";\r\nimport {\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport RandomParty from \"./components/RandomParty\";\r\nimport NotFound from \"./NotFound\";\r\nimport Welcome from \"./components/Welcome\";\r\n\r\nexport enum Routes {\r\n  Root = \"/\",\r\n  RandomParty = \"/random-party\",\r\n  ItemIdentifier = \"/item-identifier\"\r\n}\r\n\r\nconst Routing: React.FC = () =>\r\n  <Switch>\r\n    <Route path={Routes.RandomParty} exact component={RandomParty} />\r\n    <Route path={Routes.Root} exact component={Welcome} />\r\n    <Route>\r\n      <NotFound />\r\n    </Route>\r\n  </Switch>;\r\n\r\nexport default Routing;","import React, { useState } from \"react\";\r\n\r\nconst MMGames = [\r\n  \"MM6\",\r\n  \"MM7\",\r\n];\r\n\r\ninterface IAvailableClasses {\r\n  [index: string]: string[];\r\n};\r\n\r\nconst availableClasses: IAvailableClasses = {\r\n  \"MM6\": [\r\n    \"Knight\",\r\n    \"Paladin\",\r\n    \"Archer\",\r\n    \"Druid\",\r\n    \"Cleric\",\r\n    \"Sorcerer\",\r\n  ],\r\n  \"MM7\": [\r\n    \"Knight\",\r\n    \"Paladin\",\r\n    \"Archer\",\r\n    \"Druid\",\r\n    \"Cleric\",\r\n    \"Sorcerer\",\r\n    \"Monk\",\r\n    \"Ranger\",\r\n    \"Thief\",\r\n  ],\r\n};\r\n\r\ninterface IPartySizes {\r\n  [index: string]: number;\r\n};\r\n\r\nconst partySizes: IPartySizes = {\r\n  \"MM6\": 4,\r\n  \"MM7\": 4,\r\n}\r\n\r\ninterface IRandomPartyState {\r\n  game: string,\r\n  partyMembers: string[],\r\n}\r\n\r\nconst RandomParty: React.FC = () => {\r\n  const [state, setState] = useState<IRandomPartyState>({\r\n    game: \"\",\r\n    partyMembers: [],\r\n  });\r\n\r\n  const generateParty = (game: string) => {\r\n    const classes = availableClasses[game];\r\n    const partySize = partySizes[game];\r\n\r\n    let partyMembers: string[] = [];\r\n\r\n    for (let i = 0; i < partySize; i++) {\r\n      partyMembers.push(classes[Math.floor(Math.random() * classes.length)]);\r\n    }\r\n\r\n    setState({\r\n      game,\r\n      partyMembers,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        {MMGames.map(game => (\r\n          <button\r\n            key={game}\r\n            onClick={() => generateParty(game)}\r\n            className=\"primary-button\"\r\n          >\r\n            {game}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      {state.partyMembers.length > 0 &&\r\n        <div>\r\n          <h4>Random {state.game} Party</h4>\r\n          <ol>\r\n            {state.partyMembers.map((mem, ix) =>\r\n              <li\r\n                key={ix}\r\n              >\r\n                {mem}\r\n              </li>\r\n            )}\r\n          </ol>\r\n        </div>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RandomParty;","import React from 'react';\r\n\r\nconst NotFound: React.FC = () =>\r\n  <>\r\n    <h2>Whoopsie</h2>\r\n    <p>Doesn't look like there's anything here.</p>\r\n  </>\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\n\r\nconst Welcome: React.FC = () =>\r\n  <>\r\n    <h2>Might and Magic Tools</h2>\r\n    <p>Welcome to Might and Magic Tools. Here you will find many little tools. Enjoy!</p>\r\n  </>;\r\n\r\nexport default Welcome;","import React from 'react';\r\nimport \"./MenuItem.scoped.scss\";\r\nimport { Link } from 'react-router-dom';\r\nimport { useRouteMatch } from \"react-router-dom\";\r\n\r\ninterface IMenuItemProps {\r\n  label: string,\r\n  icon: string,\r\n  url: string,\r\n}\r\n\r\nconst MenuItem: React.FC<IMenuItemProps> = ({ label, icon, url }) => {\r\n  let match = useRouteMatch(url);\r\n\r\n  return (\r\n    <Link to={url} className={`menu-item ${match ? \"active\" : \"\"}`}>\r\n      <img src={icon} alt={label} /> {label}\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default MenuItem;\r\n","import React from 'react';\r\nimport \"./MainMenu.scoped.scss\";\r\nimport backupIcon from \"media/icons/backup.svg\";\r\nimport magnifyingGlassIcon from \"media/icons/magnifying-glass.svg\";\r\nimport MenuItem from './MenuItem';\r\nimport { Routes } from '../../Routing';\r\n\r\nconst MainMenu: React.FC = () =>\r\n  <div className=\"main-menu\">\r\n    <MenuItem\r\n      label=\"Random Party\"\r\n      icon={backupIcon}\r\n      url={Routes.RandomParty}\r\n    />\r\n    <MenuItem\r\n      label=\"MM3 Items\"\r\n      icon={magnifyingGlassIcon}\r\n      url={Routes.ItemIdentifier}\r\n    />\r\n  </div>;\r\n\r\nexport default MainMenu;\r\n","import React from 'react';\r\nimport \"./Layout.scoped.scss\";\r\nimport MainMenu from './MainMenu';\r\n\r\nconst Layout: React.FC = ({ children }) =>\r\n  <div className=\"site\">\r\n    <MainMenu />\r\n    <div className=\"page-layout\">\r\n      {children}\r\n    </div>\r\n  </div>;\r\n\r\nexport default Layout;\r\n","import React from 'react';\nimport Routing from './Routing';\nimport Layout from './components/layout/Layout';\nimport {\n  BrowserRouter\n} from \"react-router-dom\";\n\nconst App: React.FC = () =>\n  <BrowserRouter>\n    <Layout>\n      <Routing />\n    </Layout>\n  </BrowserRouter>;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}